/* Global Styles for Web */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #F8F9FE;
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 10px;
}

::-webkit-scrollbar-thumb {
  background: #6C63FF;
  border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
  background: #5849FF;
}

/* Smooth Transitions */
button,
a,
input,
textarea {
  transition: all 0.25s ease-in-out;
}

/* Focus Styles */
button:focus,
input:focus,
textarea:focus {
  outline: 2px solid #6C63FF;
  outline-offset: 2px;
}

/* Card Hover Effects */
.card-hover {
  transition: transform 0.25s ease, box-shadow 0.25s ease;
}

.card-hover:hover {
  transform: translateY(-4px);
  box-shadow: 0 10px 30px rgba(108, 99, 255, 0.15);
}

/* Button Hover Effects */
.button-hover {
  transition: all 0.25s ease;
}

.button-hover:hover {
  transform: scale(1.02);
  box-shadow: 0 6px 20px rgba(108, 99, 255, 0.3);
}

.button-hover:active {
  transform: scale(0.98);
}

/* Responsive Container */
@media (min-width: 768px) {
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 24px;
  }
}

/* Grid Layouts */
.grid-2 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
}

.grid-3 {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 16px;
}

.grid-4 {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
}

@media (max-width: 1024px) {
  .grid-4 {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 768px) {

  .grid-3,
  .grid-4 {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 480px) {

  .grid-2,
  .grid-3,
  .grid-4 {
    grid-template-columns: 1fr;
  }
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes pulse {

  0%,
  100% {
    transform: scale(1);
  }

  50% {
    transform: scale(1.05);
  }
}

.fade-in {
  animation: fadeIn 0.5s ease-out;
}

.slide-in-left {
  animation: slideInLeft 0.5s ease-out;
}

.slide-in-right {
  animation: slideInRight 0.5s ease-out;
}

.pulse {
  animation: pulse 2s infinite;
}

/* Loading Spinner */
.spinner {
  border: 3px solid #f3f3f3;
  border-top: 3px solid #6C63FF;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

/* Glassmorphism Effect */
.glass {
  background: rgba(255, 255, 255, 0.7);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.3);
}

/* Gradient Text */
.gradient-text {
  background: linear-gradient(135deg, #6C63FF 0%, #5849FF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Shadow Utilities */
.shadow-sm {
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.shadow-md {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.shadow-lg {
  box-shadow: 0 10px 24px rgba(0, 0, 0, 0.12);
}

.shadow-xl {
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
}

/* Responsive Typography */
@media (max-width: 768px) {
  h1 {
    font-size: 28px;
  }

  h2 {
    font-size: 24px;
  }

  h3 {
    font-size: 20px;
  }
}

/* Image Optimization */
img {
  max-width: 100%;
  height: auto;
  display: block;
}

/* Accessibility */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

/* Print Styles */
@media print {
  .no-print {
    display: none !important;
  }
}

/* Fix: ensure react-native-web generated view wrappers and app root can expand and allow scrolling on web
   - some generated classes like .css-view-xxxx set min-height:0 which can prevent children from expanding
   - use attribute selector for class prefix to be resilient to generated names
*/
html,
body,
#root,
#root>div {
  min-height: 100vh;
  height: auto;
  overflow: auto;
}

/* Target react-native-web generated view wrappers (class names like css-view-xxxx) and allow them to grow */
[class^="css-view"] {
  min-height: auto !important;
}

/* If any top-level container is preventing scroll, allow overflow */
body>div,
#root>div>div {
  overflow: auto !important;
}

/* Additional overrides for nested react-native-web wrappers and flex items
   Some generated wrappers use combinations like 'css-view-xxxx' and multiple
   'r-*' utility classes that set flex properties. Ensure they can grow and
   don't clip their children (common cause of scroll being blocked). */

/* Allow all generated view wrappers to expand vertically */
[class^="css-view"],
[class*=" css-view-"] {
  min-height: 0 !important;
  /* keep default behavior but allow children to control height */
  height: auto !important;
  overflow: visible !important;
}

/* Target react-native-web flex utility wrappers (r-flex*, r-flexGrow*, r-overflow*) */
[class*="r-flex"],
[class*="r-flexGrow"],
[class*="r-overflow"] {
  min-height: 0 !important;
  height: auto !important;
  overflow: visible !important;
}

/* Ensure root-level containers used by Expo/React Native Web allow scrolling */
#root,
#root>div,
#root>div>div {
  min-height: 100vh !important;
  height: auto !important;
  overflow: auto !important;
}

/* If a ScrollView is rendered as an inner wrapper, make sure it can scroll on web */
div[class^="css-view"][style*="overflow"] {
  overflow: auto !important;
}

/* Improve behavior for horizontal scrollers generated by react-native-web
   Prevent horizontal scroll containers from hijacking vertical wheel/touch
   so users can scroll the page vertically when the pointer is over them. */
[class*="r-overflowX"],
[class*="r-overflow-x"],
[class*="r-overflow-lltvgl"],
[class*="r-overflow-lltvgl"] * {
  /* allow vertical panning by touch and mouse wheel to propagate */
  touch-action: pan-y;
  -ms-touch-action: pan-y;
  overscroll-behavior-x: contain;
  overscroll-behavior-y: auto;
}

/* Make sure horizontal scroll wrappers still allow visible vertical content */
[class*="r-overflowX"] {
  overflow-y: visible !important;
  -webkit-overflow-scrolling: touch;
}

/* Debug helper (comment out later): outline react-native-web view wrappers to inspect layout */
/* [class^="css-view"] { outline: 1px dashed rgba(0,0,0,0.06); } */