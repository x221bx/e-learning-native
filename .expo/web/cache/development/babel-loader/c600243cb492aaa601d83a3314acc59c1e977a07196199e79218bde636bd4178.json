{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\nconst getNavigatorLocales = () => {\n  return Platform.isDOMAvailable ? navigator.languages || [navigator.language] : [];\n};\nconst WEB_LANGUAGE_CHANGE_EVENT = 'languagechange';\nconst USES_FAHRENHEIT = ['AG', 'BZ', 'VG', 'FM', 'MH', 'MS', 'KN', 'BS', 'CY', 'TC', 'US', 'LR', 'PW', 'KY'];\nexport function addLocaleListener(listener) {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener)\n  };\n}\nexport function addCalendarListener(listener) {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener)\n  };\n}\nexport function removeSubscription(subscription) {\n  subscription.remove();\n}\nexport default {\n  get currency() {\n    return null;\n  },\n  get decimalSeparator() {\n    return 1.1.toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator() {\n    const value = 1000 .toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL() {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n  get isMetric() {\n    const {\n      region\n    } = this;\n    switch (region) {\n      case 'US':\n      case 'LR':\n      case 'MM':\n        return false;\n    }\n    return true;\n  },\n  get locale() {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    const locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n  get locales() {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    const {\n      languages = []\n    } = navigator;\n    return Array.from(languages);\n  },\n  get timezone() {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes() {\n    return [];\n  },\n  get region() {\n    const {\n      locale\n    } = this;\n    const [, ...suffixes] = typeof locale === 'string' ? locale.split('-') : [];\n    for (const suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n  getLocales() {\n    const locales = getNavigatorLocales();\n    return locales?.map(languageTag => {\n      const locale = typeof Intl !== 'undefined' ? new Intl.Locale(languageTag) : {\n        region: null,\n        textInfo: null,\n        language: null\n      };\n      const {\n        region,\n        textInfo,\n        language\n      } = locale;\n      const digitGroupingSeparator = Array.from(10000 .toLocaleString(languageTag)).filter(c => c > '9' || c < '0')[0] || null;\n      const decimalSeparator = 1.1.toLocaleString(languageTag).substring(1, 2);\n      const temperatureUnit = region ? regionToTemperatureUnit(region) : null;\n      return {\n        languageTag,\n        languageCode: language || languageTag.split('-')[0] || 'en',\n        textDirection: textInfo?.direction || null,\n        digitGroupingSeparator,\n        decimalSeparator,\n        measurementSystem: null,\n        currencyCode: null,\n        currencySymbol: null,\n        regionCode: region || null,\n        temperatureUnit\n      };\n    });\n  },\n  getCalendars() {\n    const locale = (typeof Intl !== 'undefined' ? Intl.DateTimeFormat().resolvedOptions() : null) ?? null;\n    return [{\n      calendar: locale?.calendar || locale?.calendars?.[0] || null,\n      timeZone: locale?.timeZone || locale?.timeZones?.[0] || null,\n      uses24hourClock: (locale?.hourCycle || locale?.hourCycles?.[0])?.startsWith('h2') ?? null,\n      firstWeekday: locale?.weekInfo?.firstDay || null\n    }];\n  },\n  async getLocalizationAsync() {\n    const {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone\n    } = this;\n    return {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone\n    };\n  }\n};\nfunction regionToTemperatureUnit(region) {\n  return USES_FAHRENHEIT.includes(region) ? 'fahrenheit' : 'celsius';\n}","map":{"version":3,"names":["Platform","rtlDetect","getNavigatorLocales","isDOMAvailable","navigator","languages","language","WEB_LANGUAGE_CHANGE_EVENT","USES_FAHRENHEIT","addLocaleListener","listener","addEventListener","remove","removeEventListener","addCalendarListener","removeSubscription","subscription","currency","decimalSeparator","toLocaleString","substring","digitGroupingSeparator","value","length","isRTL","isRtlLang","locale","isMetric","region","locales","Array","from","timezone","defaultTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","isoCurrencyCodes","suffixes","split","suffix","toUpperCase","getLocales","map","languageTag","Locale","textInfo","filter","c","temperatureUnit","regionToTemperatureUnit","languageCode","textDirection","direction","measurementSystem","currencyCode","currencySymbol","regionCode","getCalendars","calendar","calendars","timeZones","uses24hourClock","hourCycle","hourCycles","startsWith","firstWeekday","weekInfo","firstDay","getLocalizationAsync","includes"],"sources":["/Users/mahmoudessam/Desktop/Qotoz/native-progect/e-learning-native/node_modules/expo-localization/src/ExpoLocalization.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Platform, Subscription } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\n\nimport { Localization, Calendar, Locale, CalendarIdentifier } from './Localization.types';\n\nconst getNavigatorLocales = () => {\n  return Platform.isDOMAvailable ? navigator.languages || [navigator.language] : [];\n};\n\ntype ExtendedLocale = Intl.Locale &\n  // typescript definitions for navigator language don't include some modern Intl properties\n  Partial<{\n    textInfo: { direction: 'ltr' | 'rtl' };\n    timeZones: string[];\n    weekInfo: { firstDay: number };\n    hourCycles: string[];\n    timeZone: string;\n    calendars: string[];\n  }>;\n\nconst WEB_LANGUAGE_CHANGE_EVENT = 'languagechange';\n// https://wisevoter.com/country-rankings/countries-that-use-fahrenheit/\nconst USES_FAHRENHEIT = [\n  'AG',\n  'BZ',\n  'VG',\n  'FM',\n  'MH',\n  'MS',\n  'KN',\n  'BS',\n  'CY',\n  'TC',\n  'US',\n  'LR',\n  'PW',\n  'KY',\n];\n\nexport function addLocaleListener(listener: (event) => void): Subscription {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener),\n  };\n}\n\nexport function addCalendarListener(listener: (event) => void): Subscription {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener),\n  };\n}\n\nexport function removeSubscription(subscription: Subscription) {\n  subscription.remove();\n}\n\nexport default {\n  get currency(): string | null {\n    // TODO: Add support\n    return null;\n  },\n  get decimalSeparator(): string {\n    return (1.1).toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator(): string {\n    const value = (1000).toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n  get isMetric(): boolean {\n    const { region } = this;\n    switch (region) {\n      case 'US': // USA\n      case 'LR': // Liberia\n      case 'MM': // Myanmar\n        return false;\n    }\n    return true;\n  },\n  get locale(): string {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO(Bacon): Add this - very low priority\n    return [];\n  },\n  get region(): string | null {\n    // There is no way to obtain the current region, as is possible on native.\n    // Instead, use the country-code from the locale when possible (e.g. \"en-US\").\n    const { locale } = this;\n    const [, ...suffixes] = typeof locale === 'string' ? locale.split('-') : [];\n    for (const suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n\n  getLocales(): Locale[] {\n    const locales = getNavigatorLocales();\n    return locales?.map((languageTag) => {\n      // TextInfo is an experimental API that is not available in all browsers.\n      // We might want to consider using a locale lookup table instead.\n      const locale =\n        typeof Intl !== 'undefined'\n          ? (new Intl.Locale(languageTag) as unknown as ExtendedLocale)\n          : { region: null, textInfo: null, language: null };\n      const { region, textInfo, language } = locale;\n\n      // Properties added only for compatibility with native, use `toLocaleString` instead.\n      const digitGroupingSeparator =\n        Array.from((10000).toLocaleString(languageTag)).filter((c) => c > '9' || c < '0')[0] ||\n        null; // using 1e5 instead of 1e4 since for some locales (like pl-PL) 1e4 does not use digit grouping\n      const decimalSeparator = (1.1).toLocaleString(languageTag).substring(1, 2);\n      const temperatureUnit = region ? regionToTemperatureUnit(region) : null;\n\n      return {\n        languageTag,\n        languageCode: language || languageTag.split('-')[0] || 'en',\n        textDirection: (textInfo?.direction as 'ltr' | 'rtl') || null,\n        digitGroupingSeparator,\n        decimalSeparator,\n        measurementSystem: null,\n        currencyCode: null,\n        currencySymbol: null,\n        regionCode: region || null,\n        temperatureUnit,\n      };\n    });\n  },\n  getCalendars(): Calendar[] {\n    const locale = ((typeof Intl !== 'undefined'\n      ? Intl.DateTimeFormat().resolvedOptions()\n      : null) ?? null) as unknown as null | ExtendedLocale;\n    return [\n      {\n        calendar: ((locale?.calendar || locale?.calendars?.[0]) as CalendarIdentifier) || null,\n        timeZone: locale?.timeZone || locale?.timeZones?.[0] || null,\n        uses24hourClock: (locale?.hourCycle || locale?.hourCycles?.[0])?.startsWith('h2') ?? null, //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle\n        firstWeekday: locale?.weekInfo?.firstDay || null,\n      },\n    ];\n  },\n\n  async getLocalizationAsync(): Promise<Omit<Localization, 'getCalendars' | 'getLocales'>> {\n    const {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    } = this;\n    return {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    };\n  },\n};\n\nfunction regionToTemperatureUnit(region: string) {\n  return USES_FAHRENHEIT.includes(region) ? 'fahrenheit' : 'celsius';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}