{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"id\", \"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n  _excluded2 = [\"openByDefault\", \"lazy\", \"drawerContentOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from '../views/DrawerView';\nfunction DrawerNavigator(_ref) {\n  let {\n      id,\n      initialRouteName,\n      defaultStatus: customDefaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions\n    } = _ref,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  const {\n      openByDefault,\n      lazy,\n      drawerContentOptions\n    } = restWithDeprecated,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  let defaultScreenOptions = {};\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n    Object.keys(defaultScreenOptions).forEach(key => {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(defaultScreenOptions, null, 2)}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`);\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`);\n  }\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`);\n  }\n  const defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(DrawerRouter, {\n    id,\n    initialRouteName,\n    defaultStatus,\n    backBehavior,\n    children,\n    screenListeners,\n    screenOptions,\n    defaultScreenOptions\n  });\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","_ref","id","initialRouteName","defaultStatus","customDefaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","_objectWithoutProperties","_excluded","openByDefault","lazy","drawerContentOptions","rest","_excluded2","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent","createElement","_extends"],"sources":["/Users/mahmoudessam/Desktop/Qotoz/native-progect/e-learning-native/node_modules/@react-navigation/drawer/src/navigators/createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SACEA,sBAAsB,EAItBC,YAAY,EAIZC,oBAAoB,QACf,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,QAAQ,MAAM,WAAW;AAOhC,OAAOC,UAAU,MAAM,qBAAqB;AAW5C,SAASC,eAAeA,CAAAC,IAAA,EASd;EAAA,IATe;MACvBC,EAAE;MACFC,gBAAgB;MAChBC,aAAa,EAAEC,mBAAmB;MAClCC,YAAY;MACZC,QAAQ;MACRC,eAAe;MACfC;IAEK,CAAC,GAAAR,IAAA;IADHS,kBAAA,GAAAC,wBAAA,CACGV,IAAA,EAAAW,SAAA;EACN,MAAM;MAEJC,aAAa;MAEbC,IAAI;MAEJC;IAEF,CAAC,GAAGL,kBAAkB;IADjBM,IAAA,GAAAL,wBAAA,CACDD,kBAAkB,EAAAO,UAAA;EAEtB,IAAIC,oBAA6C,GAAG,CAAC,CAAC;EAEtD,IAAIH,oBAAoB,EAAE;IACxBI,MAAM,CAACC,MAAM,CAACF,oBAAoB,EAAE;MAClCG,cAAc,EAAEN,oBAAoB,CAACM,cAAc;MACnDC,UAAU,EAAEP,oBAAoB,CAACO,UAAU;MAC3CC,cAAc,EAAER,oBAAoB,CAACS,SAAS;MAC9CC,yBAAyB,EAAEV,oBAAoB,CAACW,aAAa;MAC7DC,mBAAmB,EAAEZ,oBAAoB,CAACY,mBAAmB;MAC7DC,gBAAgB,EAAEb,oBAAoB,CAACc,gBAAgB;MACvDC,YAAY,EAAEf,oBAAoB,CAACe,YAAY;MAC/CC,wBAAwB,EAAEhB,oBAAoB,CAACiB,kBAAkB;MACjEC,mBAAmB,EAAElB,oBAAoB,CAACkB;IAC5C,CAAC,CAAC;IAGAd,MAAM,CAACe,IAAI,CAAChB,oBAAoB,CAAC,CACjCiB,OAAO,CAAEC,GAAG,IAAK;MACjB,IAAIlB,oBAAoB,CAACkB,GAAG,CAAC,KAAKC,SAAS,EAAE;QAE3C,OAAOnB,oBAAoB,CAACkB,GAAG,CAAC;MAClC;IACF,CAAC,CAAC;IAEFtC,QAAQ,CACNiB,oBAAoB,EACnB,+LAA8LuB,IAAI,CAACC,SAAS,CAC3MrB,oBAAoB,EACpB,IAAI,EACJ,CAAC,CACD,qFAAoF,CACvF;EACH;EAEA,IAAI,OAAOJ,IAAI,KAAK,SAAS,EAAE;IAC7BI,oBAAoB,CAACJ,IAAI,GAAGA,IAAI;IAEhChB,QAAQ,CACN,IAAI,EACH,uKAAsK,CACxK;EACH;EAEA,IAAI,OAAOe,aAAa,KAAK,SAAS,EAAE;IACtCf,QAAQ,CACN,IAAI,EACH,0MAAyM,CAC3M;EACH;EAEA,MAAMM,aAA2B,GAC/BC,mBAAmB,KAAKgC,SAAS,GAC7BhC,mBAAmB,GACnBQ,aAAa,GACb,MAAM,GACN,QAAQ;EAEd,MAAM;IAAE2B,KAAK;IAAEC,WAAW;IAAEC,UAAU;IAAEC;EAAkB,CAAC,GACzD/C,oBAAoB,CAMlBD,YAAY,EAAE;IACdO,EAAE;IACFC,gBAAgB;IAChBC,aAAa;IACbE,YAAY;IACZC,QAAQ;IACRC,eAAe;IACfC,aAAa;IACbS;EACF,CAAC,CAAC;EAEJ,OACErB,KAAA,CAAA+C,aAAA,CAACD,iBAAiB,QAChB9C,KAAA,CAAA+C,aAAA,CAAC7C,UAAU,EAAA8C,QAAA,KACL7B,IAAI;IACRZ,aAAa,EAAEA,aAAc;IAC7BoC,KAAK,EAAEA,KAAM;IACbC,WAAW,EAAEA,WAAY;IACzBC,UAAU,EAAEA;EAAW,GACvB,CACgB;AAExB;AAEA,eAAehD,sBAAsB,CAKnCM,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}