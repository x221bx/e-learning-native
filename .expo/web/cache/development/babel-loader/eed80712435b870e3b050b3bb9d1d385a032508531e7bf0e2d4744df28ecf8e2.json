{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"children\", \"style\", \"onPress\", \"onLongPress\", \"onPressIn\", \"onPressOut\", \"to\", \"accessibilityRole\"],\n  _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"allowFontScaling\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\", \"testID\", \"accessibilityLabel\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nconst LinkPressable = _ref => {\n  let {\n      children,\n      style,\n      onPress,\n      onLongPress,\n      onPressIn,\n      onPressOut,\n      to,\n      accessibilityRole\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: e => {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          onPress === null || onPress === void 0 ? void 0 : onPress(e);\n        }\n      },\n      onLongPress: onLongPress ?? undefined,\n      onPressIn: onPressIn ?? undefined,\n      onPressOut: onPressOut ?? undefined\n    }), children);\n  } else {\n    return React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\nexport default function DrawerItem(props) {\n  const {\n    colors\n  } = useTheme();\n  const {\n      icon,\n      label,\n      labelStyle,\n      to,\n      focused = false,\n      allowFontScaling,\n      activeTintColor = colors.primary,\n      inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n      activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n      inactiveBackgroundColor = 'transparent',\n      style,\n      onPress,\n      pressColor,\n      pressOpacity,\n      testID,\n      accessibilityLabel\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded2);\n  const {\n    borderRadius = 4\n  } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  const iconNode = icon ? icon({\n    size: 24,\n    focused,\n    color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius,\n      backgroundColor\n    }, style]\n  }), React.createElement(LinkPressable, {\n    testID: testID,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius\n    }],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    allowFontScaling: allowFontScaling,\n    style: [{\n      color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color,\n    focused\n  })))));\n}\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"names":["PlatformPressable","Link","useTheme","Color","React","Platform","StyleSheet","Text","View","LinkPressable","_ref","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","_objectWithoutProperties","_excluded","OS","createElement","_extends","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","testID","accessibilityLabel","_excluded2","borderRadius","flatten","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["/Users/mahmoudessam/Desktop/Qotoz/native-progect/e-learning-native/node_modules/@react-navigation/drawer/src/views/DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n\n  /**\n   * Accessibility label for drawer item.\n   */\n  accessibilityLabel?: string;\n  /**\n   * ID to locate this drawer item in tests.\n   */\n  testID?: string;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  onPressIn,\n  onPressOut,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        // types for PressableProps and TextProps are incompatible with each other by `null` so we\n        // can't use {...rest} for these 3 props\n        onLongPress={onLongPress ?? undefined}\n        onPressIn={onPressIn ?? undefined}\n        onPressOut={onPressOut ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        testID={testID}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}