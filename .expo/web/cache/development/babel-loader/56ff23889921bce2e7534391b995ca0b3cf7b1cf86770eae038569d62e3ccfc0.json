{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub\n} = Animated;\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\nexport default class DrawerView extends React.Component {\n  componentDidUpdate(prevProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar\n    } = this.props;\n    if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n      this.toggleDrawer(open);\n    }\n    this.pendingOpenValue = undefined;\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    }\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n  handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n  handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n  getDrawerWidth = () => {\n    const {\n      drawerStyle,\n      dimensions\n    } = this.props;\n    const {\n      width = DEFAULT_DRAWER_WIDTH\n    } = StyleSheet.flatten(drawerStyle) || {};\n    if (typeof width === 'string' && width.endsWith('%')) {\n      const percentage = Number(width.replace(/%$/, ''));\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n    return typeof width === 'number' ? width : 0;\n  };\n  clock = new Clock();\n  isDrawerTypeFront = new Value(this.props.drawerType === 'front' ? TRUE : FALSE);\n  isOpen = new Value(this.props.open ? TRUE : FALSE);\n  nextIsOpen = new Value(UNSET);\n  isSwiping = new Value(FALSE);\n  initialDrawerWidth = this.getDrawerWidth();\n  gestureState = new Value(GestureState.UNDETERMINED);\n  touchX = new Value(0);\n  velocityX = new Value(0);\n  gestureX = new Value(0);\n  offsetX = new Value(0);\n  position = new Value(this.props.open ? this.initialDrawerWidth * (this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n  containerWidth = new Value(this.props.dimensions.width);\n  drawerWidth = new Value(this.initialDrawerWidth);\n  drawerOpacity = new Value(this.props.drawerType === 'permanent' ? 1 : 0);\n  drawerPosition = new Value(this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n  touchDistanceFromDrawer = cond(this.isDrawerTypeFront, cond(eq(this.drawerPosition, DIRECTION_LEFT), max(sub(sub(this.touchX, this.gestureX), this.drawerWidth), 0), min(multiply(sub(sub(this.containerWidth, this.drawerWidth), sub(this.touchX, this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n  swipeDistanceThreshold = new Value(this.props.swipeDistanceThreshold);\n  swipeVelocityThreshold = new Value(this.props.swipeVelocityThreshold);\n  currentOpenValue = this.props.open;\n  isStatusBarHidden = false;\n  manuallyTriggerSpring = new Value(FALSE);\n  transitionTo = isOpen => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0)\n    };\n    return block([cond(clockRunning(this.clock), NOOP, [set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, this.velocityX), set(this.isOpen, isOpen), startClock(this.clock), call([], this.handleStartInteraction), set(this.manuallyTriggerSpring, FALSE)]), spring(this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n      toValue\n    })), cond(state.finished, [set(this.touchX, 0), set(this.gestureX, 0), set(this.velocityX, 0), set(this.offsetX, 0), stopClock(this.clock), call([this.isOpen], _ref => {\n      let [value] = _ref;\n      const open = Boolean(value);\n      this.handleEndInteraction();\n      if (open !== this.props.open) {\n        this.toggleDrawer(this.props.open);\n      }\n    })])]);\n  };\n  dragX = block([onChange(this.isOpen, call([this.isOpen], _ref2 => {\n    let [value] = _ref2;\n    const open = Boolean(value);\n    this.currentOpenValue = open;\n    if (open !== this.props.open) {\n      if (open) {\n        this.props.onOpen();\n      } else {\n        this.props.onClose();\n      }\n      this.pendingOpenValue = open;\n      this.forceUpdate();\n    }\n  })), onChange(this.nextIsOpen, cond(neq(this.nextIsOpen, UNSET), [cond(clockRunning(this.clock), stopClock(this.clock)), set(this.isOpen, this.nextIsOpen), set(this.gestureX, 0), set(this.nextIsOpen, UNSET)])), onChange(this.isSwiping, call([this.isSwiping], _ref3 => {\n    let [value] = _ref3;\n    const {\n      keyboardDismissMode\n    } = this.props;\n    if (value === TRUE) {\n      if (keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      this.toggleStatusBar(true);\n    } else {\n      this.toggleStatusBar(this.currentOpenValue);\n    }\n  })), onChange(this.gestureState, cond(eq(this.gestureState, GestureState.ACTIVE), call([], this.handleStartInteraction))), cond(eq(this.gestureState, GestureState.ACTIVE), [cond(this.isSwiping, NOOP, [set(this.isSwiping, TRUE), set(this.offsetX, this.position)]), set(this.position, add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)), stopClock(this.clock)], [set(this.isSwiping, FALSE), set(this.touchX, 0), this.transitionTo(cond(this.manuallyTriggerSpring, this.isOpen, cond(or(and(greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)), greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)), cond(eq(this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0), lessThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0)), this.isOpen)))]), this.position]);\n  translateX = cond(eq(this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(this.drawerWidth, -1), this.dragX), 0), max(min(this.drawerWidth, this.dragX), 0));\n  progress = cond(eq(this.drawerWidth, 0), 0, abs(divide(this.translateX, this.drawerWidth)));\n  handleGestureEvent = event([{\n    nativeEvent: {\n      x: this.touchX,\n      translationX: this.gestureX,\n      velocityX: this.velocityX\n    }\n  }]);\n  handleGestureStateChange = event([{\n    nativeEvent: {\n      state: s => set(this.gestureState, s)\n    }\n  }]);\n  handleContainerLayout = e => this.containerWidth.setValue(e.nativeEvent.layout.width);\n  handleDrawerLayout = e => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n    requestAnimationFrame(() => requestAnimationFrame(() => this.drawerOpacity.setValue(1)));\n  };\n  toggleDrawer = open => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n      this.currentOpenValue = open;\n    }\n  };\n  toggleStatusBar = hidden => {\n    const {\n      hideStatusBarOnOpen: hideStatusBar,\n      statusBarAnimation\n    } = this.props;\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n      overlayAccessibilityLabel\n    } = this.props;\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n    const contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n    const drawerTranslateX = drawerType === 'back' ? I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n    const offset = drawerType === 'back' ? 0 : I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n    const hitSlop = isRight ? {\n      right: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    } : {\n      left: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    };\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n    return React.createElement(DrawerProgressContext.Provider, {\n      value: progress\n    }, React.createElement(PanGestureHandler, _extends({\n      activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      onGestureEvent: this.handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange,\n      hitSlop: hitSlop,\n      enabled: drawerType !== 'permanent' && swipeEnabled\n    }, gestureHandlerProps), React.createElement(Animated.View, {\n      onLayout: this.handleContainerLayout,\n      style: [styles.main, {\n        flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n      }]\n    }, React.createElement(Animated.View, {\n      style: [styles.content, {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: contentTranslateX\n        }]\n      }]\n    }, React.createElement(View, {\n      accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n      importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n      style: styles.content\n    }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(Overlay, {\n      progress: progress,\n      onPress: () => this.toggleDrawer(false),\n      accessibilityLabel: overlayAccessibilityLabel,\n      style: overlayStyle,\n      accessibilityElementsHidden: !isOpen,\n      importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n    })), React.createElement(Animated.Code, {\n      exec: this.containerWidth\n    }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n      exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], () => this.currentOpenValue = false)])])])\n    }), React.createElement(Animated.View, {\n      removeClippedSubviews: Platform.OS !== 'ios',\n      onLayout: this.handleDrawerLayout,\n      style: [styles.container, {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: drawerTranslateX\n        }],\n        opacity: this.drawerOpacity\n      }, drawerType === 'permanent' ? isRight ? {\n        right: 0\n      } : {\n        left: 0\n      } : [styles.nonPermanent, isRight ? {\n        right: offset\n      } : {\n        left: offset\n      }, {\n        zIndex: drawerType === 'back' ? -1 : 0\n      }], drawerStyle]\n    }, renderDrawerContent()))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","Component","componentDidUpdate","prevProps","open","drawerPosition","drawerType","swipeDistanceThreshold","swipeVelocityThreshold","hideStatusBarOnOpen","hideStatusBar","props","pendingOpenValue","toggleDrawer","undefined","toggleStatusBar","setValue","isDrawerTypeFront","componentWillUnmount","handleEndInteraction","interactionHandle","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","drawerStyle","dimensions","width","flatten","endsWith","percentage","Number","replace","isFinite","clock","isOpen","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","_objectSpread","_ref","value","Boolean","dragX","_ref2","onOpen","onClose","forceUpdate","_ref3","keyboardDismissMode","dismiss","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleContainerLayout","e","layout","handleDrawerLayout","requestAnimationFrame","hidden","statusBarAnimation","setHidden","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","overlayAccessibilityLabel","isRight","contentTranslateX","drawerTranslateX","getConstants","isRTL","offset","hitSlop","right","left","createElement","Provider","_extends","activeOffsetX","failOffsetY","onGestureEvent","onHandlerStateChange","enabled","onLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","onPress","accessibilityLabel","Code","exec","removeClippedSubviews","OS","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["/Users/mahmoudessam/Desktop/Qotoz/native-progect/e-learning-native/node_modules/@react-navigation/drawer/src/views/legacy/Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.getConstants().isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.getConstants().isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    accessibilityLabel={overlayAccessibilityLabel}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}