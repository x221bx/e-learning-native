import React, { useEffect, useState, useRef } from 'react';import { StatusBar } from 'expo-status-bar';import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';import { createNativeStackNavigator } from '@react-navigation/native-stack';import { createStackNavigator } from '@react-navigation/stack';import { createDrawerNavigator } from '@react-navigation/drawer';import { Platform, ActivityIndicator, View, Text } from 'react-native';import AsyncStorage from '@react-native-async-storage/async-storage';import { Ionicons } from '@expo/vector-icons';import { GestureHandlerRootView } from 'react-native-gesture-handler';import { enableScreens } from 'react-native-screens';import * as SplashScreen from 'expo-splash-screen';import { useSelector, useDispatch } from 'react-redux';if (Platform.OS !== 'web') {    enableScreens(true);}SplashScreen.preventAutoHideAsync();import HomeScreen from './src/screens/HomeScreen';import SearchScreen from './src/screens/SearchScreen';import SearchResultsScreen from './src/screens/SearchResultsScreen';import MyCoursesScreen from './src/screens/MyCoursesScreen';import ProfileScreen from './src/screens/ProfileScreen';import CourseDetailsScreen from './src/screens/CourseDetailsScreen';import CoursePlayScreen from './src/screens/CoursePlayScreen';import TeacherProfileScreen from './src/screens/TeacherProfileScreen';import MessagesScreen from './src/screens/MessagesScreen';import AdminCoursesScreen from './src/screens/admin/AdminCoursesScreen';import CourseFormScreen from './src/screens/admin/CourseFormScreen';import WelcomeScreen from './src/screens/auth/WelcomeScreen';import LoginScreen from './src/screens/auth/LoginScreen';import RegisterScreen from './src/screens/auth/RegisterScreen';import theme from './src/theme';import { t } from './src/i18n';import { withStore } from './src/store';import { loadUser } from './src/store/slices/authSlice';import { setDarkMode, setLocaleUI } from './src/store/uiSlice';const Tab = createBottomTabNavigator();const Stack = Platform.OS === 'web' ? createStackNavigator() : createNativeStackNavigator();const AuthStack = Platform.OS === 'web' ? createStackNavigator() : createNativeStackNavigator();const Drawer = createDrawerNavigator();function AuthNavigator() {    return (        <AuthStack.Navigator screenOptions={{ headerShown: false }}>            <AuthStack.Screen name="Welcome" component={WelcomeScreen} />            <AuthStack.Screen name="Login" component={LoginScreen} />            <AuthStack.Screen name="Register" component={RegisterScreen} />        </AuthStack.Navigator>    );}function HomeStack() {    return (        <Stack.Navigator>            <Stack.Screen name="HomeMain" component={HomeScreen} options={{ headerShown: false }} />            <Stack.Screen name="CourseDetails" component={CourseDetailsScreen} options={{ headerShown: false }} />            <Stack.Screen name="CoursePlay" component={CoursePlayScreen} options={{ title: t('course') }} />            <Stack.Screen name="TeacherProfile" component={TeacherProfileScreen} options={{ title: t('teacher_profile') }} />            <Stack.Screen name="Messages" component={MessagesScreen} options={{ title: t('messages') }} />        </Stack.Navigator>    );}function SearchStack() {    return (        <Stack.Navigator>            <Stack.Screen name="SearchMain" component={SearchScreen} options={{ headerShown: false }} />            <Stack.Screen name="SearchResults" component={SearchResultsScreen} options={{ title: t('search') }} />            <Stack.Screen name="CourseDetails" component={CourseDetailsScreen} options={{ headerShown: false }} />            <Stack.Screen name="CoursePlay" component={CoursePlayScreen} options={{ title: t('course') }} />        </Stack.Navigator>    );}function AdminStack() {    return (        <Stack.Navigator>            <Stack.Screen name="AdminCourses" component={AdminCoursesScreen} options={{ title: t('admin') }} />            <Stack.Screen name="AdminCourseForm" component={CourseFormScreen} options={{ title: t('course') }} />        </Stack.Navigator>    );}function DrawerNavigator() {  const user = useSelector((state) => state.auth?.user);  const { isAuthenticated, isGuest } = useSelector((s) => s.auth);  const isAuthedLike = isAuthenticated || isGuest;  const isAdmin = user?.role === 'admin';  return (    <Drawer.Navigator      key={isAuthedLike ? 'app' : 'welcome'}      initialRouteName={isAuthedLike ? 'HomeTabs' : 'WelcomeStack'}      useLegacyImplementation={false}      screenOptions={{        headerShown: false,        drawerType: Platform.OS === 'web' ? 'front' : 'slide',        swipeEnabled: Platform.OS !== 'web',        lazy: false,      }}    >      {isAuthedLike ? (        <>          <Drawer.Screen name="HomeTabs" component={MainTabs} options={{ title: t('home') }} />          <Drawer.Screen name="Messages" component={MessagesScreen} options={{ title: t('messages') }} />          <Drawer.Screen name="Logout" component={require('./src/screens/LogoutScreen').default} options={{ title: 'Logout' }} />          {isAdmin && (            <>              <Drawer.Screen name="AdminPanel" component={AdminStack} options={{ title: t('admin') }} />              <Drawer.Screen name="AdminUsers" component={require('./src/screens/admin/AdminUsersScreen').default} options={{ title: 'Admin Users' }} />            </>          )}        </>      ) : (        <Drawer.Screen name="WelcomeStack" component={AuthNavigator} options={{ title: 'Welcome' }} />      )}    </Drawer.Navigator>  );}function MainTabs() {    return (        <Tab.Navigator            screenOptions={({ route }) => ({                headerShown: false,                tabBarActiveTintColor: theme.colors.primary,                tabBarInactiveTintColor: theme.colors.muted,                tabBarStyle: { height: 58, paddingBottom: 6 },                tabBarIcon: ({ color, size, focused }) => {                    const map = {                        Home: focused ? 'home' : 'home-outline',                        Search: focused ? 'search' : 'search-outline',                        MyCourses: focused ? 'book' : 'book-outline',                        Profile: focused ? 'person' : 'person-outline',                    };                    const name = map[route.name] || 'ellipse-outline';                    return <Ionicons name={name} color={color} size={size} />;                },            })}        >            <Tab.Screen name="Home" component={HomeStack} options={{ tabBarLabel: t('home') }} />            <Tab.Screen name="Search" component={SearchStack} options={{ tabBarLabel: t('search') }} />            <Tab.Screen name="MyCourses" component={MyCoursesScreen} options={{ headerShown: true, headerTitle: t('my_courses'), tabBarLabel: t('my_courses') }} />            <Tab.Screen name="Profile" component={ProfileScreen} options={{ headerShown: true, headerTitle: t('profile'), tabBarLabel: t('profile') }} />        </Tab.Navigator>    );}function AppContent() {  const dispatch = useDispatch();  const { isAuthenticated, isGuest, loading } = useSelector((state) => state.auth);  const darkMode = useSelector((s) => s.ui.darkMode);  const locale = useSelector((s) => s.ui.locale);  const [isInitializing, setIsInitializing] = useState(true);  useEffect(() => {    const initializeApp = async () => {      try {        await dispatch(loadUser()).unwrap();        try {          const dark = await AsyncStorage.getItem('@elearning_dark_mode');          if (dark != null) dispatch(setDarkMode(JSON.parse(dark)));          const lc = await AsyncStorage.getItem('@elearning_locale');          if (lc) {            dispatch(setLocaleUI(lc));            try { require('./src/i18n').setLocale(lc); } catch {}          }        } catch {}      } catch (e) {      } finally {        setIsInitializing(false);        SplashScreen.hideAsync();      }    };    initializeApp();  }, [dispatch]);  const navTheme = darkMode ? DarkTheme : {    ...DefaultTheme,    colors: { ...DefaultTheme.colors, background: theme.colors.background },  };  if (isInitializing || loading) {    return (      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: theme.colors.background }}>        <ActivityIndicator size="large" color={theme.colors.primary} />      </View>    );  }  return (    <GestureHandlerRootView style={{ flex: 1 }}>      <NavigationContainer theme={navTheme} key={locale || 'en'}>        <StatusBar style={darkMode ? 'light' : 'dark'} />        <DrawerNavigator />      </NavigationContainer>    </GestureHandlerRootView>  );}function App() {    return <AppContent />;}export default withStore(App);